from test_sets.stories.story_globals import OFFLOAD_PATTERN_100_0, OFFLOAD_PATTERN_100_10, OFFLOAD_PATTERN_90_10, \
    STORY_TYPE_LINK_ID, STORY_TYPE_OFFLOAD, STORY_TYPE_SETUP, \
    STORY_SETUP_TYPE_HYBRID, STORY_SETUP_TYPE_ORACLE, STORY_SETUP_TYPE_PYTHON
from test_sets.stories.story_setup_functions import drop_backend_test_table, gen_add_sales_based_list_partition_ddl,\
    gen_hybrid_drop_ddl, gen_list_multi_part_value_create_ddl, gen_sales_based_list_create_ddl, \
    gen_split_sales_based_list_partition_ddl, partition_columns_if_supported, \
    SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2, SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4, SALES_BASED_LIST_HV_5, \
    SALES_BASED_LIST_HV_6, SALES_BASED_LIST_PNAME_3, SALES_BASED_LIST_PNAME_4, SALES_BASED_LIST_PNAME_5,\
    SALES_BASED_LIST_PNAME_6, LOWER_YRMON_NUM, UPPER_YRMON_NUM
from test_sets.stories.story_assertion_functions import offload_lpa_fact_assertion, synthetic_part_col_name, text_in_messages

from gluent import RESET_HYBRID_VIEW_EXCEPTION_TEXT, OFFLOAD_TYPE_CHANGE_FOR_LIST_EXCEPTION_TEXT, \
    OFFLOAD_TYPE_CHANGE_FOR_LIST_MESSAGE_TEXT
from gluentlib.offload.offload_functions import convert_backend_identifier_case
from gluentlib.offload.offload_metadata_functions import OFFLOAD_TYPE_FULL, OFFLOAD_TYPE_INCREMENTAL,\
    INCREMENTAL_PREDICATE_TYPE_LIST
from gluentlib.offload.offload_source_data import INCREMENTAL_OFFLOAD_DEFAULT_PARTITION_EXCEPTION_TEXT, \
    IPA_OFFLOAD_DEFAULT_PARTITION_EXCEPTION_TEXT, NO_MATCHING_PARTITION_EXCEPTION_TEXT
from gluentlib.offload.oracle.oracle_column import ORACLE_TYPE_NUMBER
from testlib.test_framework.test_constants import PARTITION_FUNCTION_TEST_FROM_INT8

LPA_NUM_PART_KEY_TABLE = 'STORY_LPA_NUM_KEY'
LPA_VC2_PART_KEY_TABLE = 'STORY_LPA_VC2_KEY'
LPA_CHR_PART_KEY_TABLE = 'STORY_LPA_CHR_KEY'
LPA_DT_PART_KEY_TABLE = 'STORY_LPA_DT_KEY'
LPA_TS_PART_KEY_TABLE = 'STORY_LPA_TS_KEY'
LPA_NUM_PART_FUNC_TABLE = 'STORY_LPA_NUM_PF'
LPA_PART1_KEY1, LPA_PART1_KEY2 = '123', '456'
LPA_PART2_KEY1 = '789'
LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2 = '2012-01-01', '2012-02-01'
LPA_DT_PART2_KEY1 = '2012-03-01'

LPA_FACT_TABLE = 'STORY_LPA_FACT'
LPA_FULL_FACT_TABLE = 'STORY_LPA_FULL_DEF_FACT'

LPA_UNICODE_FACT_TABLE = 'STORY_LPA_UNI_FACT'
LPA_UNICODE_PART1_KEY1, LPA_UNICODE_PART1_KEY2 = '\u00f6', 'o'
LPA_UNICODE_PART2_KEY1 = '\u30ad'


def offload_list_partition_append_story_tests(schema, hybrid_schema, data_db, options, backend_api, frontend_api,
                                              repo_client):
    udf = data_db + '.' + PARTITION_FUNCTION_TEST_FROM_INT8
    udf_synth_name = synthetic_part_col_name('U0', 'CAT')
    udf_synth_name = convert_backend_identifier_case(options, udf_synth_name)
    return [
        {'id': 'offload_lpa_num_key_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_NUM_PART_KEY_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE:
                       lambda: gen_list_multi_part_value_create_ddl(schema, LPA_NUM_PART_KEY_TABLE, ORACLE_TYPE_NUMBER,
                                                                    [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1]),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_NUM_PART_KEY_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_NUM_PART_KEY_TABLE)]}},
        {'id': 'offload_lpa_num_key_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition With NUMBER Key',
         'narrative': 'Offload a partition with multiple NUMBER partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_NUM_PART_KEY_TABLE),
                     'equal_to_values': ['%s,%s' % (LPA_PART1_KEY1, LPA_PART1_KEY2)],
                     'offload_partition_lower_value': 0,
                     'offload_partition_upper_value': 1000,
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_NUM_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_PART1_KEY1, LPA_PART1_KEY2],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_num_key_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'LPA Next Partition With NUMBER Key',
         'narrative': 'Offload next partition with NUMBER partition key',
         'options': {'owner_table': '%s.%s' % (schema, LPA_NUM_PART_KEY_TABLE),
                     'equal_to_values': [LPA_PART2_KEY1],
                     'verify_row_count': 'aggregate'},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_NUM_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_vc2_key_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_VC2_PART_KEY_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE:
                       lambda: gen_list_multi_part_value_create_ddl(schema, LPA_VC2_PART_KEY_TABLE, 'VARCHAR2',
                                                                    [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1]),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_VC2_PART_KEY_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_VC2_PART_KEY_TABLE)]}},
        {'id': 'offload_lpa_vc2_key_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition with VC2 key',
         'narrative': 'Offload a partition with multiple VC2 partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_VC2_PART_KEY_TABLE),
                     'equal_to_values': ['%s,%s' % (LPA_PART1_KEY1, LPA_PART1_KEY2)],
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_VC2_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_PART1_KEY1, LPA_PART1_KEY2],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_vc2_key_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'LPA Next Partition with VC2 key',
         'narrative': 'Offload a partition with multiple VC2 partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_VC2_PART_KEY_TABLE),
                     'equal_to_values': [LPA_PART2_KEY1],
                     'verify_row_count': 'aggregate'},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_VC2_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_chr_key_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_CHR_PART_KEY_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE:
                       lambda: gen_list_multi_part_value_create_ddl(schema, LPA_CHR_PART_KEY_TABLE, 'CHAR',
                                                                    [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1]),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_CHR_PART_KEY_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_CHR_PART_KEY_TABLE)]}},
        {'id': 'offload_lpa_chr_key_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition with CHAR key',
         'narrative': 'Offload a partition with multiple CHAR partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_CHR_PART_KEY_TABLE),
                     'equal_to_values': ['%s,%s' % (LPA_PART1_KEY1, LPA_PART1_KEY2)],
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_CHR_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_PART1_KEY1, LPA_PART1_KEY2],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_chr_key_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'LPA Next Partition with CHAR key',
         'narrative': 'Offload a partition with multiple CHAR partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_CHR_PART_KEY_TABLE),
                     'equal_to_values': [LPA_PART2_KEY1],
                     'verify_row_count': 'aggregate'},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_CHR_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_dt_key_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_DT_PART_KEY_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE:
                       lambda: gen_list_multi_part_value_create_ddl(schema, LPA_DT_PART_KEY_TABLE, 'DATE',
                                                                    [LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2, LPA_DT_PART2_KEY1]),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_DT_PART_KEY_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_DT_PART_KEY_TABLE)]}},
        {'id': 'offload_lpa_dt_key_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition with DATE key',
         'narrative': 'Offload a partition with multiple DATE partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_DT_PART_KEY_TABLE),
                     'equal_to_values': ['%s,%s' % (LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2)],
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_DT_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
                              lambda test: True)]},
        {'id': 'offload_lpa_dt_key_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'LPA Next List Partition with DATE key',
         'narrative': 'Offload a partition with multiple DATE partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_DT_PART_KEY_TABLE),
                     'equal_to_values': [LPA_DT_PART2_KEY1],
                     'verify_row_count': 'aggregate'},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_DT_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2, LPA_DT_PART2_KEY1],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_ts_key_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_TS_PART_KEY_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE: gen_list_multi_part_value_create_ddl(schema, LPA_TS_PART_KEY_TABLE, 'TIMESTAMP',
                                                                                 [LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2, LPA_DT_PART2_KEY1]),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_TS_PART_KEY_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_TS_PART_KEY_TABLE)]}},
        {'id': 'offload_lpa_ts_key_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition with CHAR key',
         'narrative': 'Offload a partition with multiple CHAR partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_TS_PART_KEY_TABLE),
                     'equal_to_values': ['%s,%s' % (LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2)],
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_TS_PART_KEY_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_DT_PART1_KEY1, LPA_DT_PART1_KEY2],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_FACT_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE:
                       lambda: gen_sales_based_list_create_ddl(frontend_api, schema, LPA_FACT_TABLE, default_partition=True),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_FACT_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_FACT_TABLE)]}},
        {'id': 'offload_lpa_fact_offload_empty1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload Empty LIST Partition',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'equal_to_values': [SALES_BASED_LIST_HV_2],
                     'offload_partition_lower_value': LOWER_YRMON_NUM,
                     'offload_partition_upper_value': UPPER_YRMON_NUM,
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_2], check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST,
                                                      backend_table_count_check=0),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload First LIST Partition',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'equal_to_values': [SALES_BASED_LIST_HV_1],
                     'offload_partition_lower_value': LOWER_YRMON_NUM,
                     'offload_partition_upper_value': UPPER_YRMON_NUM,
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1], check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_offload_empty2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload IPA Empty LIST Partition',
         'narrative': 'Offload IPA an empty LIST partition and ensure, even though no data copied, metadata and hybrid views reflect current and past predicates',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'equal_to_values': [SALES_BASED_LIST_HV_2]},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload IPA LIST By Partition Name',
         'narrative': 'Offload IPA a partition by name rather than value and ensure metadata and hybrid views reflect current and past predicates',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'partition_names_csv': SALES_BASED_LIST_PNAME_3 + ',' + SALES_BASED_LIST_PNAME_4},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2,
                                                       SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_offload_default',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload IPA Default LIST Partition',
         'narrative': 'Attempt and fail to Offload IPA a default partition',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'equal_to_values': ['DEfauLT']},
         'expected_exception_string': IPA_OFFLOAD_DEFAULT_PARTITION_EXCEPTION_TEXT},
        {'id': 'offload_lpa_fact_pointless_ipa',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Attempt Re-offload Partition',
         'narrative': 'Offloads same partition from fact table again which should result in no action and return of False for early abort',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'partition_names_csv': SALES_BASED_LIST_PNAME_3},
         'expected_status': False},
        {'id': 'offload_lpa_fact_offload3',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload IPA LIST With Agg Validation',
         'narrative': 'Offload IPA a LIST partition and verify row count using aggregate method',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'partition_names_csv': SALES_BASED_LIST_PNAME_5,
                     'verify_row_count': 'aggregate'},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2,
                                                       SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4,
                                                       SALES_BASED_LIST_HV_5],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_offload4',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Reset Hybrid View for List 90/10 (Expect to fail)',
         'narrative': 'Reset the predicate in a list 90/10 config with no new value, this should be rejected',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'reset_hybrid_view': True},
         'expected_exception_string': RESET_HYBRID_VIEW_EXCEPTION_TEXT},
        {'id': 'offload_lpa_fact_offload5',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Reset Hybrid View for List 90/10 (Expect to fail)',
         'narrative': 'Reset the predicate in a list 90/10 config with an invalid list',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'reset_hybrid_view': True,
                     'partition_names_csv': 'NOT_A_PARTITION'},
         'expected_exception_string': NO_MATCHING_PARTITION_EXCEPTION_TEXT},
        {'id': 'offload_lpa_fact_offload6',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Reset Hybrid View for List 90/10',
         'narrative': 'Reset the predicate in a list 90/10 config with a new list',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'reset_hybrid_view': True,
                     'partition_names_csv': SALES_BASED_LIST_PNAME_3},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_3], check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_offload7',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA to 90/10 After View Reset',
         'narrative': """Offload a partition after the Hybrid View reset, should move data and influence the metadata.
                         We pass HV 5 and 6 but only 6 has not been offloaded, should then have 3, 5 and 6 in view while only copying 6.""",
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'partition_names_csv': SALES_BASED_LIST_PNAME_5 + ',' + SALES_BASED_LIST_PNAME_6},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_5, SALES_BASED_LIST_HV_6],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_def_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload All But DEFAULT LIST Partitions',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'equal_to_values': [SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2, SALES_BASED_LIST_HV_3,
                                         SALES_BASED_LIST_HV_4, SALES_BASED_LIST_HV_5, SALES_BASED_LIST_HV_6],
                     'offload_partition_lower_value': LOWER_YRMON_NUM,
                     'offload_partition_upper_value': UPPER_YRMON_NUM,
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2, SALES_BASED_LIST_HV_3,
                                                       SALES_BASED_LIST_HV_4, SALES_BASED_LIST_HV_5, SALES_BASED_LIST_HV_6],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_fact_def_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload IPA Default LIST Partition',
         'narrative': 'Attempt and fail to Offload IPA a default partition',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'equal_to_values': ['default']},
         'expected_exception_string': IPA_OFFLOAD_DEFAULT_PARTITION_EXCEPTION_TEXT},
        {'id': 'offload_lpa_fact_def_offload3',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload DEFAULT Partition',
         'narrative': 'Only way to offload the default partition is to switch to FULL',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FACT_TABLE),
                     'offload_type': OFFLOAD_TYPE_FULL},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      None, check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_0,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_unicode_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_UNICODE_FACT_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE: gen_list_multi_part_value_create_ddl(schema, LPA_UNICODE_FACT_TABLE, 'NCHAR',
                                                                                 [LPA_UNICODE_PART1_KEY1, LPA_UNICODE_PART1_KEY2, LPA_UNICODE_PART2_KEY1]),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_UNICODE_FACT_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_UNICODE_FACT_TABLE)]}},
        {'id': 'offload_lpa_unicode_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition with unicode key',
         'narrative': """Offload a partition from a table that has unicode partition keys.
                         Impala/HDFS do not support unicode partition keys so we partition the backend by ID instead.
                         We can still check Gluent code and metadata honour the characters""",
         'options': {'owner_table': '%s.%s' % (schema, LPA_UNICODE_FACT_TABLE),
                     'equal_to_values': [(LPA_UNICODE_PART1_KEY1, LPA_UNICODE_PART1_KEY2)],
                     'reset_backend_table': True,
                     'offload_partition_columns': partition_columns_if_supported(backend_api, 'id'),
                     'offload_partition_granularity': '100',
                     'offload_partition_lower_value': 0,
                     'offload_partition_upper_value': 10000},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_UNICODE_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_UNICODE_PART1_KEY1, LPA_UNICODE_PART1_KEY2],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST,
                                                      check_hwm_metadata_with_sql=True),
              lambda test: True)]},
        {'id': 'offload_lpa_unicode_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition with unicode key',
         'narrative': """Offload a partition from a table that has unicode partition keys.
                         Impala/HDFS do not support unicode partition keys so we partition the backend by ID instead.
                         We can still check Gluent code and metadata honour the characters.
                         This will also test that the updating of dependent hybrid views works (regexp with unicodes)""",
         'options': {'owner_table': '%s.%s' % (schema, LPA_UNICODE_FACT_TABLE),
                     'equal_to_values': [(LPA_UNICODE_PART2_KEY1,)]},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_UNICODE_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [LPA_UNICODE_PART1_KEY1, LPA_UNICODE_PART1_KEY2, LPA_UNICODE_PART2_KEY1],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST,
                                                      check_hwm_metadata_with_sql=True),
              lambda test: True)]},
        {'id': 'offload_lpa_num_func_setup1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_NUM_PART_FUNC_TABLE,
         'setup': {
             STORY_SETUP_TYPE_ORACLE:
                 gen_list_multi_part_value_create_ddl(schema, LPA_NUM_PART_FUNC_TABLE, ORACLE_TYPE_NUMBER,
                                                      [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1]),
             STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_NUM_PART_FUNC_TABLE),
             STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                       data_db, LPA_NUM_PART_FUNC_TABLE)]}},
        {'id': 'offload_lpa_num_func_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'IPA 90/10 List Partition With Partition Function',
         'narrative': 'Offload a partition with multiple NUMBER partition keys',
         'options': {'owner_table': '%s.%s' % (schema, LPA_NUM_PART_FUNC_TABLE),
                     'equal_to_values': ['%s,%s' % (LPA_PART1_KEY1, LPA_PART1_KEY2)],
                     'offload_partition_functions': udf,
                     'offload_partition_lower_value': 0,
                     'offload_partition_upper_value': 1000,
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(
                 test, schema, hybrid_schema, data_db, LPA_NUM_PART_FUNC_TABLE, options, backend_api,
                 frontend_api, repo_client, [LPA_PART1_KEY1, LPA_PART1_KEY2], check_rowcount=True,
                 incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST, partition_functions=udf,
                 synthetic_partition_column_name=udf_synth_name),
              lambda test: True)],
         'prereq': lambda: backend_api.gluent_partition_functions_supported()},
        {'id': 'offload_lpa_num_func_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'LPA Next Partition With Partition Function',
         'options': {'owner_table': '%s.%s' % (schema, LPA_NUM_PART_FUNC_TABLE),
                     'equal_to_values': [LPA_PART2_KEY1],
                     'verify_row_count': 'aggregate'},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(
                 test, schema, hybrid_schema, data_db, LPA_NUM_PART_FUNC_TABLE, options, backend_api,
                 frontend_api, repo_client, [LPA_PART1_KEY1, LPA_PART1_KEY2, LPA_PART2_KEY1], check_rowcount=True,
                 incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST, partition_functions=udf),
              lambda test: True)],
         'prereq': lambda: backend_api.gluent_partition_functions_supported()},
    ]


def offload_list_partition_append_full_story_tests(schema, hybrid_schema, data_db, options,
                                                   backend_api, frontend_api, repo_client):
    return [
        {'id': 'offload_lpa_full_def_setup',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_FULL_FACT_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE: gen_sales_based_list_create_ddl(frontend_api, schema, LPA_FULL_FACT_TABLE, default_partition=True),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_FULL_FACT_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_FULL_FACT_TABLE)]}},
        {'id': 'offload_lpa_full_def_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload 100/0 List with Default Partition',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'offload_partition_lower_value': LOWER_YRMON_NUM,
                     'offload_partition_upper_value': UPPER_YRMON_NUM,
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      None, check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_0,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_def_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Convert 100/0 to 90/10 (Expect to Fail)',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'offload_type': OFFLOAD_TYPE_INCREMENTAL},
         'expected_exception_string': INCREMENTAL_OFFLOAD_DEFAULT_PARTITION_EXCEPTION_TEXT},
        {'id': 'offload_lpa_full_def_offload3',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload new partition in 100/0 list fact, nothing will be offloaded',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE)},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      None, check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_0,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_def_split_part',
         'type': STORY_TYPE_SETUP,
         'title': 'Add a partition to 100/0 list table',
         'setup': {STORY_SETUP_TYPE_ORACLE: lambda: gen_split_sales_based_list_partition_ddl(schema, LPA_FULL_FACT_TABLE,
                                                                                             options, frontend_api)}},
        {'id': 'offload_lpa_full_def_offload4',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload new partition in 100/0 list fact, nothing will be offloaded',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE)},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      None, check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_0,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_setup_no_def1',
         'type': STORY_TYPE_SETUP,
         'title': 'Create %s' % LPA_FULL_FACT_TABLE,
         'setup': {STORY_SETUP_TYPE_ORACLE: gen_sales_based_list_create_ddl(frontend_api, schema, LPA_FULL_FACT_TABLE, default_partition=False),
                   STORY_SETUP_TYPE_HYBRID: gen_hybrid_drop_ddl(options, frontend_api, hybrid_schema, LPA_FULL_FACT_TABLE),
                   STORY_SETUP_TYPE_PYTHON: [lambda: drop_backend_test_table(options, backend_api,
                                                                             data_db, LPA_FULL_FACT_TABLE)]}},
        {'id': 'offload_lpa_full_incr_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload 90/0 All List Partitions',
         'narrative': 'Offload 90/0 a list table with no partition filter',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'reset_backend_table': True,
                     'offload_partition_lower_value': LOWER_YRMON_NUM,
                     'offload_partition_upper_value': UPPER_YRMON_NUM,
                     'offload_type': OFFLOAD_TYPE_INCREMENTAL},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2,
                                                       SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4,
                                                       SALES_BASED_LIST_HV_5, SALES_BASED_LIST_HV_6],
                                                      check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_90_10,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_incr_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload 90/0 List Prep for offload_lpa_full_incr_offload3',
         'narrative': 'Offload 90/0 first list partition ready for next test to offload with no partition filter',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'reset_backend_table': True,
                     'equal_to_values': [SALES_BASED_LIST_HV_1],
                     'offload_partition_lower_value': LOWER_YRMON_NUM,
                     'offload_partition_upper_value': UPPER_YRMON_NUM,
                     'offload_type': OFFLOAD_TYPE_INCREMENTAL},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1],
                                                      check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_90_10,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_incr_offload3',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload 90/0 Remaining Partitions from INCREMENTAL List',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'offload_type': OFFLOAD_TYPE_INCREMENTAL},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1, SALES_BASED_LIST_HV_2,
                                                       SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4,
                                                       SALES_BASED_LIST_HV_5, SALES_BASED_LIST_HV_6],
                                                      check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_90_10,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_setup_no_def2',
         'type': STORY_TYPE_LINK_ID,
         'linked_id': 'offload_lpa_full_setup_no_def1'},
        {'id': 'offload_lpa_full_offload1',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload 90/0 List',
         'narrative': 'Offload 90/0 a list table without a default partition',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'equal_to_values': [SALES_BASED_LIST_HV_1],
                     'offload_partition_lower_value': LOWER_YRMON_NUM,
                     'offload_partition_upper_value': UPPER_YRMON_NUM,
                     'reset_backend_table': True},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_1],
                                                      check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_90_10,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_offload2',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Switch 90/10 List Table to 100/0',
         'narrative': 'Will offload remaining partitions, update hybrid view to not have UNION ALL and mark metadata as FULL. Check there is a warning about the custom agg rule',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'offload_type': OFFLOAD_TYPE_FULL},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      None, check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_0,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_add_part1',
         'type': STORY_TYPE_SETUP,
         'title': 'Add a partition to 100/0 list table',
         'setup': {STORY_SETUP_TYPE_ORACLE: lambda: gen_add_sales_based_list_partition_ddl(schema, LPA_FULL_FACT_TABLE,
                                                                                           options, frontend_api)}},
        {'id': 'offload_lpa_full_offload3',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload new partition in 100/0 list fact',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE)},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      None, check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_0,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_offload4',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Switch 100/0 List Table to 100/10',
         'narrative': 'Use offload to convert 100/0 to 100/10. Will update hybrid view to have UNION ALL and leave metadata as FULL. Because we are going from no high values to some we start adding to metadata afresh',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'partition_names_csv': SALES_BASED_LIST_PNAME_3 + ',' + SALES_BASED_LIST_PNAME_4},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4],
                                                      check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_10,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_offload5',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Manipulate High Values in 100/10',
         'narrative': 'Add another partition to the hybrid view predicate',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'partition_names_csv': SALES_BASED_LIST_PNAME_5},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4,
                                                       SALES_BASED_LIST_HV_5], check_rowcount=True,
                                                      offload_pattern=OFFLOAD_PATTERN_100_10,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_add_part2',
         'type': STORY_TYPE_SETUP,
         'title': 'Add a partition to 100/10 list table',
         'setup': {STORY_SETUP_TYPE_ORACLE: lambda: gen_add_sales_based_list_partition_ddl(schema, LPA_FULL_FACT_TABLE,
                                                                                           options, frontend_api)}},
        {'id': 'offload_lpa_full_offload6',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Offload Partition to 100/10 List Table',
         'narrative': 'Transport another partition with no request to change the hybrid view predicate',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE)},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_3, SALES_BASED_LIST_HV_4,
                                                       SALES_BASED_LIST_HV_5],
                                                      check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_10,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_offload7',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Switch 100/10 List Table to 100/0',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'offload_type': OFFLOAD_TYPE_FULL},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      None, check_rowcount=True, offload_pattern=OFFLOAD_PATTERN_100_0,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True)]},
        {'id': 'offload_lpa_full_offload8',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Convert 100/0 to 90/10 (Expect to Fail)',
         'narrative': 'Convert 100/0 to 90/10 with no partition identification options, this will abort',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'offload_type': OFFLOAD_TYPE_INCREMENTAL},
         'expected_exception_string': OFFLOAD_TYPE_CHANGE_FOR_LIST_EXCEPTION_TEXT},
        {'id': 'offload_lpa_full_offload9',
         'type': STORY_TYPE_OFFLOAD,
         'title': 'Convert 100/0 to 90/10',
         'narrative': 'Convert 100/0 to 90/10 with partition identification options',
         'options': {'owner_table': '%s.%s' % (schema, LPA_FULL_FACT_TABLE),
                     'offload_type': OFFLOAD_TYPE_INCREMENTAL,
                     'partition_names_csv': SALES_BASED_LIST_PNAME_5 + ',' + SALES_BASED_LIST_PNAME_6},
         'assertion_pairs': [
             (lambda test: offload_lpa_fact_assertion(test, schema, hybrid_schema, data_db, LPA_FULL_FACT_TABLE,
                                                      options, backend_api, frontend_api, repo_client,
                                                      [SALES_BASED_LIST_HV_5, SALES_BASED_LIST_HV_6],
                                                      check_rowcount=True,
                                                      incremental_predicate_type=INCREMENTAL_PREDICATE_TYPE_LIST),
              lambda test: True),
             (lambda test: text_in_messages(test.offload_messages, OFFLOAD_TYPE_CHANGE_FOR_LIST_MESSAGE_TEXT),
              lambda test: True)]},
    ]
